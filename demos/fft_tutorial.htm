<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;
      charset=windows-1252">
    <meta name="GENERATOR" content="Microsoft FrontPage 3.0">
    <title>Nyquist FFT and Inverse FFT Tutorial</title>
    <style>body {max-width: 40em}</style>
  </head>
  <body>
    <h1>Nyquist FFT and Inverse FFT Tutorial</h1>
    <p><i>Note: the code presented in this tutorial is available in the
      file </i><a
href="file://src/fft_demo.lsp"><tt>demos/src/fft_demo.lsp</tt></a>.</p>
    <p><i>Note 2: Nyquist now includes some spectral processing
functions in </i><a
href="file://src/spectral-processing.sal"><tt>demos/src/spectral-processing.sal</tt></a>,
<a
href="file://src/spectral-processing.lsp"><tt>demos/src/spectral-processing.lsp</tt></a>,
<i>and</i> <a
href="file://../runtime/spectral-analysis.lsp"><tt>runtime/spectral-processing.lsp</tt></a><i>.
Comments and documentation can be found in these files along with some
spectral processing examples.</i></p>
    <p>Nyquist provides functions for FFT and inverse FFT operations on
      streams of audio data. Because sounds can be of any length, but an
      FFT operates on a fixed amount of data, FFT processing is
      typically done in short blocks or windows that move through the
      audio. Thus, a stream of samples is converted in to a sequence of
      FFT frames representing short-term spectra. </p>
    <p>Nyquist does not have a special data type corresponding to a
      sequence of FFT frames. This would be nice, but it would mean
      creating a large set of operations suitable for processing frame
      sequences. Another approach, and perhaps the most "pure" would be
      to convert a single sound into a multichannel sound, with one
      channel per bin of the FFT. </p>
    <p>Instead, Nyquist violates its "pure" functional model and resorts
      to objects for FFT processing. A sequence of frames is represented
      by an XLISP object. Whenever you send the selector <tt>:next</tt>
      to the object, you get back either NIL, indicating the end of the
      sequence, or you get an array of FFT coefficients. </p>
    <p>The Nyquist function FFT (mnemonic, isn't it?) returns one of the
      frame sequence generating objects. You can pass any frame sequence
      generating object to another function, IFFT, and turn the sequence
      back into audio. </p>
    <p>With&nbsp; FFT and IFFT, you can create all sorts of interesting
      processes. The main idea is to create intermediate objects that
      both accept and generate sequences of frames. These objects can
      operate on the frames to implement the desired spectral-domain
      processes. Examples of this will follow, but first, let's try
      something simpler. </p>
    <h2>Simple FFT Example</h2>
    <p>[<i>Special thanks to James Valenti for detailed comments and
        explanations about this code. -RBD</i>]</p>
    <p>Just to convince ourselves that this works and to explore the FFT
      function, let's perform an FFT on a sinusoid. To make the outcome
      predictable, we will use 32 samples of sinusoid with a period of 8
      samples. If we take a 32-point FFT, the spectrum should show a
      strong 4th harmonic (there are 4 8-sample periods) and zero
      everywhere else. </p>
    <p>Before the test, we will introduce a simple function to create an
      FFT sequence generating object, which is called an iterator: The
      function is called <tt>make-fft1-iterator</tt>, and creates an
      object of class <tt>fft1-class</tt> (I am using <tt>fft1</tt>
      rather than <tt>fft</tt> because this is a simplified version
      that will be improved later). Objects of this class will have the
      fields <tt>sound</tt>, <tt>length</tt>, and <tt>skip</tt>.
      Create the class by sending <tt>class</tt> (the super class of
      all classes) a <tt>:new</tt> message to create a new class that
      will be a sub-class of <tt>class</tt>:</p>
    <pre>(setf fft1-class (send class :new '(sound length skip)))
</pre>
    Add a method named :next to the <tt>fft1-class</tt>. The method
    will have a formal argument list of <tt>()</tt> and the code body
    of <tt>(snd-fft sound length skip nil)</tt>, so this is simply a
    wrapper for calling <tt>snd-fft</tt> which has takes as parameters:
    the source sound, the fft length, the number of samples to advance
    for each fft, and the sound to use as a window function (in this
    case, no windowing is indicated by <tt>nil</tt>.) Each time <tt>snd-fft</tt>
    is called, it will advance by <tt>skip</tt> to the next set of
    samples. The function (and thus the <tt>:next</tt> method) will
    return an array containing the results of the next short-time fft:
    <pre>(send fft1-class :answer :next '() '(
&nbsp;&nbsp;&nbsp; (snd-fft sound length skip nil)))
</pre>
    Add a method named <tt>:isnew</tt> to the <tt>fft1-class</tt>.
    This is a "standard" method that is called automatically to
    initialize a new object of the class when the <tt>:new</tt> method
    is sent to the class. Any parameters sent to <tt>:new</tt> are
    passed on to <tt>:isnew</tt>, and in this case the formal parameter
    list is <tt>(snd len skp)</tt> and the body of the function is
    three <tt>setf</tt>'s that copy the parameters into the fields (or
    instance variables) of the new object, which are named <tt>sound</tt>,
    <tt>length</tt>, and <tt>skip</tt>:
    <pre>(send fft1-class :answer :isnew '(snd len skp) '(
&nbsp;&nbsp;&nbsp; (setf sound snd)
&nbsp;&nbsp;&nbsp; (setf length len)
&nbsp;&nbsp;&nbsp; (setf skip skp)))
</pre>
    Make a new function named <tt>make-fft1-iterator</tt> to create an
    <tt>fft1-iterator</tt> with the parameters <tt>sound</tt>, <tt>length</tt>,
    and <tt>skip</tt>. The function makes a new object by sending the <tt>:new</tt>
    message to the <tt>fft1-class</tt>. Because <tt>fft1-class</tt>
    consumes the sound (by calling <tt>snd-fft</tt>), this function
    copies the sound with <tt>snd-copy</tt> to avoid any unexpected
    side effects on the <tt>sound</tt> parameter.
    <pre>(defun make-fft1-iterator (sound length skip)
&nbsp; (send fft1-class :new (snd-copy sound) length skip))</pre>
    <p>For test data, create a sinusoid. <tt>lfo</tt> generates a one
      second sinusoid. The <tt>control-srate-abs</tt> transformation
      changes the sample rate generated by the <tt>lfo</tt> to <tt>points</tt>
      and since the duration is one second, there will be exactly <tt>points</tt>
      samples generated. The <tt>cycles</tt> parameter is the frequency
      of the sinusoid, so a value of 1 will generate one cycle (in one
      second) and a value of 2 will generate 2 cycles in one second,
      etc.</p>
    <pre>;; create a 1-second sinusoid with points samples at cycles hz:
(defun short-sine (points cycles)
&nbsp; (control-srate-abs points (lfo cycles)))
</pre>
    In the <tt>fft-test</tt> function, the <tt>let</tt> introduces a
    list of local variables (just <tt>fft-iter</tt><tt>fft-iter</tt>,
    it will be ignored by this function. Inside the <tt>let</tt>, <tt>fft-iter</tt>
    is set to a newly created instance of <tt>fft1-iterator</tt>,
    initialized with a signal that has 4 cycles of a sinusoid in 32
    points, with an fft length of 32 samples and a skip of 32 samples
    (zero overlap):
    <pre>(defun fft-test ()
&nbsp; (let (fft-iter)
&nbsp;&nbsp;&nbsp; ;; signal will have 4 cycles in 32 points:
&nbsp;&nbsp;&nbsp; (setf fft-iter (make-fft1-iterator (short-sine 32 4) 32 32))
&nbsp;&nbsp;&nbsp; (display "fft-test" (send fft-iter :next))))</pre>
    <p>Running this prints an array of nearly-zero values except for the
      9th element (index 8), which is -16. (In an ideal world, all other
      values would be exactly zero, but because numerical computation
      has limited precision, you may see some ugly values like
      -1.15578e-15. The "e-15" part means 10-to-the-minus-15 power, or
      0.000000000000001, which is at least pretty close to zero.) The
      layout is as follows (remember that the Fourier Transform analyzes
      a signal as the sum of sines and cosines): </p>
    <ul>
      <li>the DC component goes in array element 0. The <i>DC component</i>
        is just the coefficient for the zero-frequency cosine component.
        Since cosine at zero frequency is equal to 1 everywhere, this is
        just the sum of all the samples. In electrical terms,
        alternating current (AC) averages to zero, and any non-zero
        average is the direct current (DC) part. Note that sine of zero
        is zero, so there is no zero-frequency sine term.</li>
      <li>the Cosine part is in elements 2i - 1. <i>Cosine part</i>
        means the real coefficients of the cosines at various
        frequencies. </li>
      <li>the Sine part is in elements 2i. <i>Sine part</i> means the
        real coefficients of the sines at various frequencies.</li>
      <li>the Nyquist frequency component is in the last element. The <i>Nyquist


          frequency component</i> is the coefficient for the cosine
        component at half the sampling rate (which is also called the
        Nyquist frequency). Note that at the Nyquist frequency, samples
        of sine would be taken at the angles of 0 and PI, where sine is
        zero, so there is no Nyquist frequency sine term.</li>
    </ul>
    The output should look like this:
    <pre>&gt; (load "fft1.lsp")
;loading "fft1.lsp"
;fft-test : (SEND FFT-ITER :NEXT) =
; #(4.89859e-16 0 0 0 0 0 0 2.38419e-07
; -16 0 0 0 0 0 0 4.89859e-16
; -0 0 0 0 0 0 0 -2.38419e-07
; 0 0 0 0 0 0 0 4.89859e-16)
;T
;&gt;
</pre>
    <p>Thus, the element at index 8 is the 4th Sine component,
      indicating a 4th harmonic as expected. Why is the number -16
      rather than -32 or -1? This is just how the FFT is defined. And
      why -16 rather than +16. Again, if you look closely at the
      definition, you'll find a minus sign either in front of the sine
      term or in the complex exponential. While these may not seem to be
      exactly coefficients of sines and cosines, the FFT and IFFT are
      carefully defined to be inverses of one another.</p>
    <h2>Simple Inverse FFT Example</h2>
    <p>Now, let's try to reverse the FFT and recover the sinusoid. We
      will use the <tt>snd-ifft</tt> function, which takes five
      parameters: </p>
    <ul>
      <li>the starting time of the resulting sound</li>
      <li>the sample rate of the resulting sound</li>
      <li>the iterator object, which will be called to obtain short term
        spectra (frames)</li>
      <li>the step-size, how many samples to advance for each frame</li>
      <li>the window (or NIL), by which each frame is multiplied after
        the IFFT</li>
    </ul>
    <p>The result returned from snd-ifft is a sound which is assigned
      here to local variable ifft-snd. In this case, the sound will have
      a start time of 0, a sample rate of 32, the spectral frames
      (actually just one frame) will be obtained by sending the <tt>:next</tt>
      message to <tt>fft-iter</tt>, the skip between successive frames
      is 32, and no windowing is applied.</p>
    <pre>(defun ifft-test ()
&nbsp; (let (fft-iter ifft-snd)
&nbsp;&nbsp;&nbsp; (setf fft-iter (make-fft1-iterator (short-sine 32 4) 32 32))
&nbsp;&nbsp;&nbsp; (setf ifft-snd (snd-ifft 0 32 fft-iter 32 NIL))
&nbsp;&nbsp;&nbsp; (display "fft-ifft" (snd-length ifft-snd 200))
&nbsp;&nbsp;&nbsp; (display "fft-ifft" (snd-samples ifft-snd 200))
    ifft-snd )) ; return the sound</pre>
    <p>Now call the function:</p>
    <pre>(ifft-test)</pre>
    <p>Looking at the printed samples, you can see that the result is a
      close approximation to the expected sinusoid. Since <tt>ifft-test</tt>
      returns a sound, you can call<tt> (play (ifft-test))</tt>, but in
      this case you won't hear much because the sound is only 32
      samples, and there may also be problems trying to play a sound
      that is only sampled at 32 samples per second.</p>
    <p><b>Exercise: </b>Modify <tt>short-sine</tt> to produce a cosine
      and observe the difference in the FFT. Confirm that the IFFT
      reproduces the original cosine. (Hint: the parameters to <tt>LFO</tt>
      should be: <tt>(lfo cycles 1.0 *sine-table* 90.0)</tt>,
      indicating frequency, duration, the waveform, and the initial
      phase, respectively.) <br>
      &nbsp; </p>
    <h2>Sequence of FFT Frames</h2>
    <p>Let's create an FFT iterator that reads sounds from a file. This
      is similar to what was done before, but here, <tt>s-read</tt> is
      used to read samples instead of using <tt>lfo</tt> to compute
      samples: </p>
    <pre>(defun file-fft1 (filename frame-length skip)
&nbsp; (make-fft1-iterator (s-read filename) frame-length skip))</pre>
    <p>And here is a function to recover the sound file from spectral
      frames and play it. The sound will start at time 0, at the sample
      rate <tt>*sound-srate*</tt>, using <tt>iterator</tt> to generate
      successive spectral frames, advancing <tt>skip</tt> samples
      between fft's, and no windowing. Note: <tt>*sound-srate*</tt> is
      a global variable from Nyquist that is the default sample rate for
      sounds. It can be read directly, but you should only modify it by
      calling <tt>sound-srate-abs</tt>:</p>
    <pre>(defun play-fft1 (iterator skip)
&nbsp; (play (snd-ifft 0 *sound-srate* iterator skip NIL)))</pre>
    <p>Define a filename for testing. Remember that the backslash (<tt>\</tt>)
      character is the <i>escape</i> character for XLisp strings, so
      you need to type two backslashes to denote one backslash
      character. Windows will also accept forward slashes (<tt>/</tt>)
      as a separator, and the forward slash does not need to be escaped.
      Be sure to test this with a mono file at the default sample rate
      of 44100:</p>
    <pre>;; a convenient sound file name (change this to one of your mono soundfiles):
(setf sfn "D:\\brain\\outro\\soup.wav")
</pre>
    Define a function to call <tt>play-fft1</tt> using <tt>sfn</tt> as
    the input function for analysis, a frame length (fft size) of 512,
    and a skip size of 512 (no overlap). The start time (0), sample rate
    (<tt>*sound-srate*</tt>) and windowing function (none) are
    hard-coded in <tt>play-fft1</tt>.
    <pre>(defun file-test () (play-fft1 (file-fft1 sfn 512 512) 512))</pre>
    <p>If you do not hear your original file, try playing the original
      file by typing <tt>(play-file sfn)</tt>, and make sure the file
      is a mono file at 44,100 Hz sample rate (to match <tt>*sound-srate*</tt>
      used in <tt>play-fft1</tt>). Check out the file by typing <tt>(sf-info


        sfn)</tt>.</p>
    <p>You can try different skip parameters, e.g. to play the sound at
      double speed, try this:</p>
    <pre>(play-fft1 (file-fft1 sfn 512 512) 256)</pre>
    <h2>XLisp and Garbage Collection</h2>
    <p>In the previous example, you may have noticed a lot of messages
      that look something like the following:</p>
    <pre>[ gc: total 18640, 3114 free; samples 49KB, 39KB free ]</pre>
    <h3>What the gc: Messages Mean</h3>
    <p>These messages are printed whenever the garbage collector runs to
      reclaim memory that was allocated but is no longer in use by the
      program. The memory found by the garbage collector is reused in
      future computation to avoid allocating more memory than is
      necessary. The particular message here says that 18640 "cells"
      have been allocated. Each cell is 10 bytes, so there are 186,400
      bytes, or about 186KB used to store XLisp programs and data. This
      does not include the XLisp interpreter, Nyquist functions, and
      system libraries, that take an additional 500KB or so. It also
      does not include audio samples, which are stored separately. Of
      the 18640 cells, 3114 were free after garbage collection. Of the
      49KB of audio data (samples) allocated by Nyquist, 39KB were free
      for reuse after after garbage collection.</p>
    <h3>Making GC More Effective</h3>
    <p>Nyquist and XLisp do a pretty good job of effective, automatic
      garbage collection, but since XLisp was designed to run on small
      machines, it favors using a minimal amount of memory, and this may
      result in frequent garbage collections. FFT processing, in
      particular, makes heavy use of XLisp, since every floating point
      number in every FFT frame requires the allocation of a 10-byte
      cell. When you are processing with FFTs, you can often gain some
      speed by telling XLisp to allocate more memory cells. Do this by
      calling <tt>expand</tt>:</p>
    <pre>(expand 100)</pre>
    <p>The parameter tells how many additional internal blocks of memory
      to allocate. Each block is 2000 cells, or about 20KB, so if the
      parameter is 100, you will allocate about 2MB. After allocating
      memory, the next garbage collection might look like:</p>
    <pre>[ gc: total 218640, 204298 free; samples 49KB, 44KB free ]</pre>
    <p>Notice that now, garbage collection frees a higher proportion of
      memory than before &nbsp; (204298 out of 218640 cells). Garbage
      collection is more efficient when there is a higher proportion of
      memory to free.</p>
    <p>On the other hand, you should not allocate more memory than
      necessary. If you allocate too much, parts of Nyquist and other
      programs will be paged out of RAM and onto your disk drive. Since
      Nyquist must access all of its memory for every garbage
      collection, it is very inefficient to have any of that memory
      reside on disk.</p>
    <p>Should you always expand memory? Almost all non-FFT audio
      processing uses special data structures that are outside of XLisp
      and are managed without the use of the garbage collector. Since
      audio processing normally takes over 95% of the execution time,
      you normally do not have to worry much about the efficiency of
      XLisp.</p>
    <h2>Simple Spectral Processing</h2>
    <p>The main purpose of FFT and IFFT functions is to enable
      processing in the spectral domain. Let's create a very simple
      example in which certain frequencies are set to zero, creating a
      filter effect. (Note that this is not a very good way to create
      filters because of boundary effects.) We need to create an object
      that will access an FFT iterator to get frames, and that will
      serve as an iterator to deliver frames. The code is as follows: </p>
    <pre>(setf fft-hp-class (send class :new '(source bins)))

(send fft-hp-class :answer :next '() '(
  ; get a new frame of fft coefficients from source
  (let ((frame (send source :next))) ; creates local variable - frame
    ; a note about let:
    ; the first list after let names new local variables
    ; the following lists (below) are expressions to be evaluated
    ;
    ; if frame is nil, there are no more frames to process
&nbsp;&nbsp;&nbsp; (cond (frame
           ; if frame is not nil, then do the following
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (dotimes (i bins)
             ; set all the bins from 0 to bins-1 (these are low frequency bins) to zero
             ; the order of coefficients is:
             ;    DC coefficient
             ;    first real
             ;    first imaginary
             ;    second real
             ;    second imaginary
             ;    ...
             ;    if the length is even, then last is the real
             ;       coefficient of the Nyquist frequency
             ;
             ; (Note: aref gets the ith element of the array)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (setf (aref frame i) 0.0)))) ; end of cond
&nbsp;&nbsp;&nbsp; frame))) ; frame is the last expression of the let, so it is the return value
</pre>
    Create an <tt>fft-hp-class</tt> method called <tt>:isnew</tt> to
    initialize the <tt>fft-hp-class</tt> class variables <tt>source</tt>
    and <tt>bins</tt>. The <tt>source</tt> will be a <tt>file-fft</tt>.
    <p>A refresher as to what goes on with <tt>file-fft</tt>: <tt>file-fft1</tt>
      reads a file into a sound variable and calls <tt>make-fft1-iterator</tt>.
      Then <tt>make-fft1-iterator</tt> returns an <tt>fft-1</tt> class
      by sending <tt>fft1-class :new</tt> with a copy of the sound. It
      makes this copy because it will have <tt>skip</tt> samples
      removed every invocation of <tt>fft1-class:next</tt> because this
      method calls <tt>snd-fft</tt> which removes the samples every
      time a new fft frame is calculated. </p>
    <pre>(send fft-hp-class :answer :isnew '(s b) '(
&nbsp;&nbsp;&nbsp; (setf source s)
&nbsp;&nbsp;&nbsp; (setf bins b)))
</pre>
    This is a function to make and return an instance of the <tt>fft-hp-class</tt>
    class.
    <pre>(defun make-fft-hp (source bins)
  ; Send the fft-hp-calss a :new message to create a new instance of the class
  ; and to initialize the instance with the values of source and bins
  ; Returns an object that responds to the :next message by getting the next
  ; fft frame, zeroing the low frequencies, and returning the frame.
&nbsp; (send fft-hp-class :new source bins))
</pre>
    In <tt>play-fft1</tt>, fft frames from <tt>make-fft-hp</tt> are
    converted back into audio. The audio is reconstructed using a skip
    of 512.
    <pre>(defun hp-test ()
&nbsp; (play-fft1 (make-fft-hp (file-fft1 sfn 512 512) 11) 512))</pre>
    <p>Note that <tt>make-fft-hp</tt> takes a parameter, bins, that
      tells how many coefficients of the FFT to zero. At 44,100 Hz, the
      frame rate is 44100/512 = 86.13 Hz, and this corresponds to the
      first bin (coefficients at locations 1 and 2). Since we specified
      11 for the bins parameter, this will zero the DC component and 5
      complex pairs, representing frequencies up to 86.12 * 5 = 430.7
      Hz. (If you are trying this on a laptop computer with small
      speakers, or if you are using a sound without low frequencies, you
      may want to increase the number of bins in <tt>hp-test</tt> from
      11 to 30 to make the effect really obvious.)</p>
    <p>You will notice some raspy sounds in the output. Since the FFT
      frames are not smoothed by any window or overlapped, there are
      serious windowing artifacts that are easily heard. We will look at
      ways to reduce this problem later. </p>
    <h2>Spectral Modulation</h2>
    <p>An interesting effect is to let one spectrum modulate another
      one. By multiplying the amplitude spectrum of one signal onto that
      of another, one can superimpose the two signals. (Note that adding
      spectra is simply a way to mix them and is equivalent to addition
      in the time domain.) </p>
    <p>Let's create a bright FM sound to serve as a spectral modulation
      "carrier". First, create the FM sound. This sound has an initial,
      middle, and fiinal modulation index as well as a (constant) pitch:</p>
    <pre>(defun fm-tone (step mi1 mi2 mi3)
&nbsp; (let ((hz (step-to-hz step)))
&nbsp;&nbsp;&nbsp; (setf mi1 (* mi1 hz))
&nbsp;&nbsp;&nbsp; (setf mi2 (* mi2 hz))
&nbsp;&nbsp;&nbsp; (setf mi3 (* mi3 hz))
&nbsp;&nbsp;&nbsp; (fmosc c4 (partial step&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (control-srate-abs *sound-srate*&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (pwl 0 mi1 0.5 mi2 1 mi3 1))))))</pre>
    <p>The modulated sound will be a cluster of three FM tones. You
      could use just one tone, but I have had better luck with chords or
      noise. You want to make sure the signal has plenty of amplitude at
      many frequencies; otherwise, the spectral modulation will not have
      anything to modulate.</p>
    <pre>(defun mod-snd ()
  (sum
    (fm-tone c3 15 20 15)   ;; adjust FM parameters here
    (fm-tone d3 15 20 15)   ;; adjust FM parameters here
    (fm-tone e3 15 20 15))) ;; adjust FM parameters here</pre>
    <p>Next, we need a class to do the modulation. As before, objects of
      this class respond to the <tt>:next </tt>message. In this case,
      the <tt>:next</tt> method sends&nbsp; <tt>:next</tt> to both
      sources. It then multiplies the coefficients of one by the
      computed amplitude spectrum of the other. </p>
    <pre>(setf fft-modulator-class (send class :new '(src1 src2)))

(send fft-modulator-class :answer :isnew '(s1 s2) '(
&nbsp;&nbsp;&nbsp; (setf src1 s1)
&nbsp;&nbsp;&nbsp; (setf src2 s2)))

(send fft-modulator-class :answer :next '() '(
&nbsp; (let ((frame1 (send src1 :next))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (frame2 (send src2 :next))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n half_n)
&nbsp;&nbsp;&nbsp; (cond ((and frame1 frame2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; multiply frame2 by the amplitude coefficients of frame1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (setf (aref frame2 0) (* (aref frame2 0) (aref frame1 0))) ;; DC
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (setf n (- (length frame1) 1))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; Subtracted 1 because we already took care of DC component
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (setf half_n (/ n 2)) ; integer divide
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (dotimes (i half_n)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (let* ((i2 (+ i i 2))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (i2m1 (- i2 1))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (amp (sqrt (+ (* (aref frame1 i2m1) (aref frame1 i2m1))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (* (aref frame1 i2)&nbsp;&nbsp; (aref frame1 i2))))))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (setf (aref frame2 i2m1) (* (aref frame2 i2m1) amp))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (setf (aref frame2 i2) (* (aref frame2 i2) amp))))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (cond ((= n (+ half_n half_n 2)) ;; n is even -&gt; nyquist component
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (setf (aref frame2 n) (* (aref frame2 n) (aref frame1 n)))))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frame2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (t nil)))))

(defun make-fft-modulator (src1 src2)
&nbsp; (send fft-modulator-class :new src1 src2))</pre>
    <p>The code for&nbsp; <tt>:next</tt> is longer than you might
      expect, but it is basically just a vector multiplication. Lisp is
      not ideal for numerical algorithms like this. The following code
      will test the new class: </p>
    <pre>(defun mod-test ()
&nbsp; (let ((fs 512)) ;; frame size
&nbsp;&nbsp;&nbsp; (play-fft1 (make-fft-modulator&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (file-fft1 sfn fs fs)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (make-fft1-iterator (mod-snd) fs fs))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  fs)))</pre>
    <p>Here, we pass in iterators for the sound stored in a file and for
      the modulated sound. This example seems to work best if the sound
      in the file is a voice. You can also try stretching the speech by
      reducing the step parameter to <tt>file-fft</tt> and by making
      the modulated sound longer. You might also try different sizes of
      FFTs using the frame size (<tt>fs</tt>) parameter. If the FFT
      frame size is too big, you will resolve individual harmonics of
      the voice, and if it is too small, you will not resolve formants.
      256 and 512 seem to be good numbers when working at 44,100 Hz
      sampling rates.</p>
    <h2>Smoothing Windows</h2>
    <p>In the previous examples, and especially in the last one, a lot
      of buzzing and noise is created because the boundaries of the FFT
      frames are no longer continuous when the spectrum is altered. To
      reduce the buzzing effect, we can multiply the frame by a
      smoothing window before reconstructing the time domain signal. We
      can also use a smoothing window on the input side, before taking
      the FFT. For now, we will try just a smoothing window on the IFFT
      side. </p>
    <p>The smoothing window will be a raised cosine pulse, although
      other window shapes could be used. The following code implements a
      raised cosine. (A raised cosine is a smooth bell-shaped curve that
      rises from zero to 1 and back again. The curve is one period of a
      sinusoid or cosine, but "raised" so that its minimum value is at
      zero.) The lfo function computes a sine curve, so we use an
      initial phase of 270 degrees to get the proper shape: </p>
    <pre>(defun raised-cosine ()
&nbsp; (scale 0.5&nbsp;
&nbsp;&nbsp;&nbsp; (sum (const 1)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (lfo (/ 1.0 (get-duration 1)) 1 *sine-table* 270))))</pre>
    <p>Next, we need a function to create a window of the proper length.
      The sample rate of the window does not matter because the FFT and
      IFFT functions will simply take the proper number of samples
      (without any interpolation or resampling). Therefore, we will use
      the <tt>frame-size</tt> as the sample rate, insuring that there
      are <tt>frame-size</tt> samples: </p>
    <pre>(defun fft-window (frame-size)
&nbsp; (control-srate-abs frame-size (raised-cosine)))</pre>
    <p>Now we can pass in a window to the IFFT. Let's redo the spectral
      modulation example with smoothing windows on the IFFT side. First,
      we will rewrite <tt>play-fft</tt> to use windowing: </p>
    <pre>(defun play-fft (iterator frame-size skip)
&nbsp; (play (snd-ifft 0 *sound-srate* iterator&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; skip (fft-window frame-size))))</pre>
    <p>Now, we can rewrite <tt>mod-test:</tt> </p>
    <pre>(defun mod-test-w ()
&nbsp; (let ((fs 512)) ;; frame size
&nbsp;&nbsp;&nbsp; (play-fft (make-fft-modulator&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (file-fft1 sfn fs (/ fs 2))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (make-fft1-iterator (mod-snd) fs (/ fs 2)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fs (/ fs 2))))</pre>
    <p>Notice that we reduced the step size to half the frame size. This
      is because we want the windows to overlap by 50%, creating a nice
      cross-fade from one frame to the next. </p>
    <p>You might guess that the square windowing on the analysis (FFT)
      side is injecting high frequencies into the spectrum. We can
      introduce windowing there too. We can modify <tt>make-fft-iterator</tt>
      to use a window. This will require changes to <tt>fft1-class</tt>,
      so we will use the name <tt>fft-class:</tt> </p>
    <pre>(setf fft-class (send class :new '(sound length skip window)))

(send fft-class :answer :next '() '(
&nbsp;&nbsp;&nbsp; (snd-fft sound length skip window)))

(send fft-class :answer :isnew '(snd len skp) '(
&nbsp;&nbsp;&nbsp; (setf sound snd)
&nbsp;&nbsp;&nbsp; (setf length len)
&nbsp;&nbsp;&nbsp; (setf skip skp)
&nbsp;&nbsp;&nbsp; (setf window (fft-window len)) ))

(defun make-fft-iterator (sound length skip)
&nbsp; (send fft-class :new (snd-copy sound) length skip))</pre>
    <p>Now, we can rewrite <tt>file-fft</tt> to use windowing: </p>
    <pre>(defun file-fft (filename frame-length skip)
&nbsp; (make-fft-iterator (s-read filename) frame-length skip))</pre>
    <p>Now, we can rewrite <tt>mod-test</tt> yet again: </p>
    <pre>(defun mod-test-ww ()
&nbsp; (let ((fs 512)) ;; frame size
&nbsp;&nbsp;&nbsp; (play-fft (make-fft-modulator&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (file-fft sfn fs (/ fs 2))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (make-fft-iterator (mod-snd) fs (/ fs 2)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fs (/ fs 2))))</pre>
    <p>This version seems to have less definition for speech input than
      the previous one. It might be that some windowing artifacts in the
      right places are actually beneficial! In fact, some simple
      experiments indicate that, in this example, the speech sounds
      better when the (mod-snd) sound is analyzed without windowing.
      This probably creates more noise to be modulated by the speech
      signal, so more speech information gets through. </p>
    <p>We can also stretch the result by taking smaller steps during the
      analysis (FFT) stage so that more frames are generated. I will
      also increase the frame size to obtain fewer frames/second. </p>
    <pre>(defun mod-test-wws ()
&nbsp; (let ((fs 1024)) ;; frame size
&nbsp;&nbsp;&nbsp; (play-fft (make-fft-modulator&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (file-fft sfn fs (/ fs 16))
                (make-fft1-iterator (mod-snd) fs (/ fs 16)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fs (/ fs 2))))</pre>
    <h2>Code</h2>
    <p>The source code presented in this tutorial is available in the
      file <a href="src/fft_demo.lsp"><tt>demos/src/fft_demo.lsp</tt></a>.<br>
    </p>
    <h2>Acknowledgments</h2>
    <p>Cort Lippe and Zack Settel have explored cross synthesis and
      other effects with FFTs extensively, and their work inspired these
      examples.</p>
  </body>
</html>
