<html>
  <head>
    <title>index.html</title>
    <style>body {max-width: 40em}</style>
  </head>
  <body>
    <h1>Nyquist Demos and Examples in Extensions</h1>
    <p><b>Roger B. Dannenberg &amp; many contributors</b></p>
<p>The Nyquist IDE supports Extensions, which can be managed with the
Window : Manage Extension menu item. Here is a list of some of the extensions.
    <dl>
      <dt><b>arpeggiator</b><br></dt>
      <dd> describes and implements functions to create arpeggio effects.</dd>

      <dt><b>atonal</b><br></dt>
      <dd>Jorge Sastre contributed this code to generate atonal 
        melodies. It uses simple methods, but is quite effective and has 
        been used in a number of compositions for both acoustic 
        instruments and electronics.</dd>

      <dt><b>bandfx</b><br></dt>
      <dd>describes how to use the bandfx library in Nyquist. Multiple 
        band effects split the input into frequency bands and apply 
        different effects (e.g. different delays) to each band.</dd>

      <dt><b>cellautomata</b> by Ann Lewis<br></dt>
      <dd>uses cellular automata to generate scores in Nyquist.</dd>

      <dt><b>clipsoften</b><br></dt>
      <dd>contains code to reduce the harshness where clipping occurs.</dd>

      <dt><b>compress</b><br></dt>
      <dd>implements a dynamics compressor for noisy speech audio.</dd> 

      <dt><b>convolve</b><br></dt>
      <dd>illustrates how to use convolution in Nyquist.</dd>

      <dt><b>distortion</b><br></dt>
      <dd>describes how to use the Nyquist <tt>shape</tt> function to 
        achieve distortion.</dd>

      <dt><b>dtmf</b><br></dt>
      <dd>implements a DTMF tone generator (DTMF are the "touch tones" sent by
      phones to dial numbers).</dd>

      <dt><b>ext-template1</b><br></dt>
      <dd>is an example of a Nyquist extension using documentation in HTML.</dd>

      <dt><b>ext-template2</b><br></dt>
      <dd>is an example of a Nyquist extension where documentation is
      in source code.</dd>

      <dt><b>fft</b><br></dt>
      <dd>describes how to use FFT functions in Nyquist to perform 
        spectral processing (uses Lisp syntax, see also <b>fftsal</b>.)</dd>

      <dt><b>fftsal</b><br></dt>
      <dd>describes how to use FFT functions in Nyquist to perform 
        spectral processing (uses SAL syntax, see also <b>fft</b>.)</dd>

      <dt><b>fm-voices-chowning</b><br></dt>
      <dd>re-implements FM-synthesis-based voices 
        created by computer music pioneer John Chowning.</dd>

      <dt><b>gran</b><br></dt>
      <dd>implements granular synthesis functions.</dd>

      <dt><b>intro</b><br></dt>
      <dd>The introductory chapter of the Nyquist 
          Reference Manual presents a number of small examples. 
        These are consolidated into both <code>examples.sal</code>
        and <code>examples.lsp</code> files that you can load 
        and run in Nyquist.</dd>

      <dt><b>labels</b><br></dt>
      <dd>implements code to read and write Audacity label files.</dd>
      
      <dt><b>lpc</b><br></dt>
      <dd>is a tutorial on how to use LPC functions, especially useful 
        for voice modelling and cross-synthesis.</dd>

      <dt><b>mateos</b> by Daniel Mateos</b><br></dt>
      <dd>has a number of examples currently in Lisp syntax, but they can be 
        loaded and called from SAL programs. (For an example, the Phase 
          Vocoder Tutorial described below uses <tt>mateos/organ.lsp</tt>.) 
        The directory <tt>mateos/</tt> contains <a
          <code>bell.lsp</code>, <tt>gong.lsp</tt>, <tt>organ.lsp</tt> and 
          <tt>tuba.lsp</tt>.</dd>

      <dt><b>pmorales</b> by Pedro Morales<br></dt>
      <dd>contains the following 
        programs:<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>pjmg.lsp</tt> - Some helper functions: randi1, randi2, randh1, rndh2<br>
        <b>Simple Synthesis</b><br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>A4.lsp</tt> - Waveform + Envelope, Modulating the envelope with noise<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>A5.lsp</tt> - Waveform + Envelope, Modulating the frequency<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>A6.lsp</tt> - Waveform + Envelope, Modulating the frequency, 2<br>
        <b>Additive Synthesis</b><br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>b1.lsp</tt> - Gong-like sounds<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>b2.lsp</tt> - Risset's Spectral Analysis of a Chord<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>b3.lsp</tt> - Risset Bell<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>b4.lsp</tt> - Continuous pitch control by LFO<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>b7.lsp</tt> - Risset Tibetan<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>b8.lsp</tt> - Risset Drum<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>b9.lsp</tt> - Risset Endless Glissando</a><br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>c1.lsp</tt> - Random Signals</a><br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>partial.lsp</tt> - Bell<br>
        <b>Subtractive Synthesis</b><br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>buzz.lsp</tt> - Buzz with Formant Filters<br>
        <b>Karplus Strong Synthesis</b><br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>d1.lsp</tt> - Simple KARPLUS-STRONG<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>ks.lsp</tt> - Karplus-Strong Algorithm<br>
        <b>FM Synthesis</b><br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>e2.lsp</tt> - Chowning Dynamic Spectral Evolution<br>
        <b>Physical Modeling</b><br>
        &nbsp;&nbsp;&nbsp;&nbsp; <tt>phm.lsp</tt> - Flute Physical Modelling</dd>

      <dt><b>midi</b><br></dt>
      <dd>describes how to read and write Standard MIDI Files, how to 
        generate MIDI data for sequencers, MIDI players, and music 
        notation programs, and how to use Nyquist to synthesize a MIDI 
        file.</dd>

      <dt><b>moog</b><br></dt>
      <dd>implements a mini-moog (analog synthesizer) emulator.</dd>

      <dt><b>plight</b> by Phil Light<br></dt>
      <dd>contains drum samples and drum machine software.</dd>

      <dt><b>pvoc</b><br></dt>
      <dd>shows how to use the phase vocoder in Nyquist.</dd>

      <dt><b>regression</b><br></dt>
      <dd>implements linear regression functions.</dd>

      <dt><b>reverse</b><br></dt>
      <dd>implements functions to reverse sounds and sound files.</dd>

      <dt><b>rhythm</b><br></dt>
      <dd>provides examples that use noise pulses and FM, along 
        with transposition and repetition to explore various rhythmic 
        effects.</dd>

      <dt><b>sdl</b><br></dt>
      <dd>offers a compact score language, SDL, which can be 
        used as a shorthand to generate Nyquist scores.</dd>

      <dt><b>shepard</b><br></dt>
      <dd>is a Lisp source file that produces Shepard tones.
        See comments in the code for explanations and documentation.
        There is also a <tt>shepard/shepard.ny</tt> Shepard tone plug-in
          for Audacity.</dd>

      <dt><b>sliders</tt></b><br></dt>
      <dd>illustrate the use of sliders to create interactive
        controls for sounds and compositions in Nyquist. Read the
        comments in the <tt>sliders/slider-demos.sal</tt> source code
        and find full documentation in the Nyquist Reference Manual.</dd>

      <dt><b>spatial</b><br></dt>
      <dd>implements Dolby surround encoding functions.</dd>
      
      <dt><b>stk</b><br></dt>
      <dd>plays the various STK instruments that have been
        ported to Nyquist. This file is just Lisp code, but it should be
        fairly simple to read enough of the code to understand the
        function names and parameters, and some SAL expressions are
        added in comments as guide. (Reminder <tt>(bowed g4 (bow-env
          d))</tt> in Lisp means <tt>bowed(g4, bow-env(d))</tt> in SAL,
        i.e. the first element of each list is the function and the
        remaining elements are parameters.)</dd>

      <dt><b>voice</b><br></dt>
      <dd>gives source code and examples for a source-filter
        model of the singing voice. Please read the comments in either
        the <tt>voice/voice-synthesis.sal</tt> version or the
        <tt>voice/voice-synthesis.lsp</tt> version.</dd>

      <dt><b>vosim</b><br></dt>
      <dd>gives source code and examples of the VOSIM synthesis
        technique. Please read comments in the code.</dd>

      <dt><b>warble</b><br></dt>
      <dd>explains how to create some "analog" electronic
        synthesizer sounds using FM and AM.</dd>

      <dt><b>wind</b><br></dt>
      <dd>presents some code to create wind sounds.</dd>

      <dt><br>
      </dt>
      <dd><br>
      </dd>
    </dl>
  </body>
</html>
