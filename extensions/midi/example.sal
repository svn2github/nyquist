;; midi_tutorial.htm example code to create negexp.mid and play it with Nyquist

function midinote(seq, time, dur, voice, pitch, vel)
  begin
    set time = round(time * 1000)
    set dur = round(dur * 1000)
    set pitch = round(pitch)
    set vel = round(vel)
    exec seq-insert-note(seq, time, 0, voice + 1, pitch, dur, vel)
  end

;; create list of random times and sort it
;; dur in ms.
function neg-exp-gen(len, average-ioi)
  begin
    with dur = len * average-ioi, times-list
    loop repeat len
      exec push(dur * random(10000) * 0.0001,
                times-list)
    end
    ;; to name the "less than" function, we cannot type
   ;; '<' because that is not a symbol name in SAL. Therefore
   ;; we use the string "<" and look up the symbol using
   ;; intern("<").
    set times-list = sort(times-list, intern("<"))
    display "initial list", times-list
    ;; map list to 24ths:
    return quantize-times-to-24ths(times-list)
  end

function set-tempo(tempo)
  begin
    set qtr = 60.0 / tempo
    set eighth = qtr * 0.5
    set half = qtr * 2
    set whole = qtr * 4
    set sixteenth = qtr * 0.25
  end
if ! boundp(quote(qtr)) then exec set-tempo(100)

function quantize-times-to-24ths(list)
  return mapcar(quote(quantize-time-to-24ths), list)

function quantize-time-to-24ths(time)
  return (qtr / 24.0) *
         round(24 * time / qtr)

function melody(seq, onsets)
  loop for onset in onsets
    exec midinote(seq, onset, sixteenth, 1, 48 + random(24), 100)
  end

variable *seq*

function neg-exp-melody()
  begin with times
    set *seq* = seq-create()
    ;; adds notes to *seq*
    set times = neg-exp-gen(50, eighth)
    display "quantized", times ; DEBUG
    exec melody(*seq*, times)
    set seqfile = open-binary("negexp.mid", direction: :output)
    exec seq-write-smf(*seq*, seqfile)
  end

exec neg-exp-melody()

function fm-note(chan, p, vel) ;; uses only p(itch) parameter
  begin
    ;; display "fm-note", chan, p, vel, local-to-global(0), get-duration(1)
    return pwl(0.01, 1, .5, 1, 1) *
           fmosc(p, step-to-hz(p) * pwl(0.01, 6, 0.5, 4, 1) * osc(p))
  end

play seq-midi-sal(*seq*, quote(fm-note))
