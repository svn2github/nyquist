<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <meta http-equiv="content-type" content="text/html;
      charset=windows-1252">
    <meta name="GENERATOR" content="Microsoft FrontPage 3.0">
    <title>Midi Tutorial</title>
    <style>body {max-width: 40em}</style>
  </head>
  <body>
    <h1>Midi Tutorial</h1>
<h3>Extension name: <code>midi</code></h3>
<i>This extension shows how to read and write MIDI files with Nyquist.</i>
<hr>
<!-- Version: 1.0; (version for extension metadata, do not change) -->
Author Name: Roger B. Dannenberg;<br>
Author Email: rbd@cs.cmu.edu;<br>
<br>
Additional File: use-midi-directory.sal;<br>
Additional File: midi.lsp;<br>
Additional File: midi.sal;<br>
Additional File: demo.mid.b64;<br>
Additional File: example.sal;<br>
<!-- End Metadata -->
<hr>
    <p>Nyquist can read and write midi files. Midi files are read into
      and written from a special XLisp data type called a <code>SEQ</code>,
      which is short for "sequence". (This is not part of standard
      XLisp, but rather part of Nyquist.) Nyquist can examine the
      contents of a <code>SEQ</code> type, modify the <code>SEQ</code>
      by adding or deleting Midi notes and other messages. Finally, and
      perhaps most importantly, Nyquist can use the data in a <code>SEQ</code>
      type along with a sound behavior to generate sound. In other
      words, Nyquist can become a Midi synthesizer.<br>
    </p>
    <p>In the examples below, code is presented in SAL syntax (also
available in <a href=midi.sal><tt>midi.sal</tt></a>) followed
      by LISP syntax in small print (also available in <a href=midi.sal><tt>midi.lsp</tt></a>).</p>
    <h2>The <code>SEQ</code> Type</h2>
    <p>To create a <code>SEQ</code> data object:</p>
    <pre>set my-seq = seq-create()
print type-of(my-seq)
<strong>SEQ</strong>

<small><small>(setf my-seq (seq-create))
(type-of my-seq)
<strong>SEQ</strong></small></small>
</pre>

<h2>Reading a Midi File</h2>

<p>Once you have a sequence, you can read Midi data into it from a file. You do this in
three steps:
<ol><li>Open the file in binary mode (using <code>open-binary</code>, a
  Nyquist extension to XLisp). </li>
  <li>Read from the file. </li>
  <li>Finally, you (normally) close the file. </li>
</ol>

<p>For this tutorial, we will use the <tt>demo.mid</tt> file you can
get by installing the "midi" extension using the Extension Manager.
Since the location of this file depends on your Nyquist
installation, the "midi" extension includes a simple file,
<tt>use-midi-directory</tt>, that will set the current directory to
<tt>lib/midi</tt>, enabling all the example code here to work.

<p>So, if you are working through the tutorial, start with:<br>
<pre>
load "midi/use-midi-directory"

<small><small>(sal-load "midi/use-midi-directory")</small></small></pre>

<small>Alternatively, to load your own midi file, you will need a full
path to the midi file or a path relative to your current
directory. (Note that when you load a file with the Nyquist IDE, the
IDE will set the current directory to the directory of the source
code.)</small>

<p>Now we are ready to open, read, and close the midi file:

<pre>set midi-file = open-binary("demo.mid")
exec seq-read-smf(my-seq, midi-file)
exec close(midi-file)<br><br><small><small>(setf midi-file (open-binary "demo.mid"))
(seq-read-smf my-seq midi-file)
(close midi-file)</small></small></pre>

<p>The variable <code>my-seq</code> now contains the midi data.

<h2>Writing a Midi File</h2>

<p>A sequence can be written to a file. First you open the file as a binary output file;
then you write it. The file is automatically closed.</p>
<pre>set midi-file = open-binary("copy.mid", direction: :output)
exec seq-write-smf(my-seq, midi-file)</pre>

<pre><small><small>(setf midi-file (open-binary "copy.mid" :direction :output))
(seq-write-smf my-seq midi-file)</small></small></pre>

<p>The result may not be a bit-for-bit copy of the original Midi file
because the <code>SEQ</code>
representation is not a complete representation of the Midi data. For example, the Midi
file can contain headers and meta-data that is not captured by Nyquist. Nevertheless, the
resulting Midi file should sound the same if you play it with a sequencer or Midi file
player.

<h2>Writing a Text Representation</h2>

<p>One very handy feature of the <code>SEQ</code> datatype is that it was originally
developed for a text-based representation of files called the Adagio Score Language, or
just "Adagio." You can write an Adagio file from a sequence by opening a text
file and calling <code>seq-write</code>.</p>
<pre>set gio-file = open("demo.gio", direction: :output)
exec seq-write(my-seq, gio-file, t)
exec close(gio-file)</pre>

<pre><small><small>(setf gio-file (open "demo.gio" :direction :output))
(seq-write my-seq gio-file t)
(close gio-file)</small></small></pre>

<p>Now, <code>demo.gio</code> has an Adagio format version of
<code>demo.mid</code>, but you might wonder where to find it. The
current directory can be printed as follows:
<pre>print setdir(".")</pre>

<pre><small><small>(print (setdir "."))</small></small></pre>

<p>Now, open <code>demo.gio</code> with your favorite editor had have
a look. The basic format of the Adagio file is pretty intuitive, but you can find the full
description in the CMU Midi Toolkit manual or in a chapter of the Nyquist manual,
including the online version in HTML.

<h2>Reading an Adagio File</h2>

<p>Because Adagio is text, you can easily edit or compose your own Adagio file. You
should be aware that Adagio supports numerical parameters, where pitch and duration are
just numbers, <em>and symbolic parameters, </em>where a pitch might be <code>Bf4</code>
(for B-flat above middle-C) and a duration might be <code>QT</code> (for a quarter note
triplet). Symbolic parameters are especially convenient for manual entry of data. Once you
have an Adagio file, you can create a sequence from it in Nyquist:</p><pre>set seq-2 = seq-create()
set gio-file = open("demo.gio")
exec seq-read(seq-2, gio-file)
exec close(gio-file)</pre>

<pre><small><small>(setf seq-2 (seq-create))
(setf gio-file (open "demo.gio"))
(seq-read seq-2 gio-file)
(close gio-file)</small></small></pre>

<p>Now you have another sequence, <code>seq-2</code> similar to
<code>my-seq</code>, but the data was loaded from the text file <code>demo.gio</code>.

<h2>Adding Notes to a <code>SEQ</code> Type

</h2><p>Although not originally intended for this purpose, XLisp and Nyquist form a powerful
language for generating Midi files. These can then be played using a Midi synthesizer or
using Nyquist, as will be illustrated later.</p>

<p>To add notes to a sequence, you call <code>seq-insert-note</code> as illustrated in
this routine, called <code>midinote</code>. Since <code>seq-insert-note</code> requires
integer parameters, with time in milliseconds, <code>midinote</code> performs some
conversions and limiting to keep data in range:</p>

<pre>function midinote(seq, time, dur, voice, pitch, vel)
  begin
    set time = round(time * 1000)
    set dur = round(dur * 1000)
    set pitch = round(pitch)
    set vel = round(vel)
    exec seq-insert-note(seq, time, 0, voice + 1, pitch, dur, vel)
  end</pre>

<pre><small><small>(defun midinote (seq time dur voice pitch vel)
  (setf time (round (* time 1000)))
  (setf dur (round (* dur 1000)))
  (setf pitch (round pitch))
  (setf vel (round vel))
  (seq-insert-note seq time 0 (1+ voice) pitch dur vel))
</small></small></pre>

<p>Now, let's add some notes to a sequence:</p>

<pre>variable *seq*
function test()
  begin
    set *seq* = seq-create()
    exec midinote(*seq*, 0.0, 1.0, 1, c4, 100)
    exec midinote(*seq*, 1.0, 0.5, 1, d4, 100)
    exec midinote(*seq*, 2.0, 0.8, 1, a4, 100)
    set seqfile = open-binary("test.mid", direction: :output)
    exec seq-write-smf(*seq*, seqfile)
    exec close(seqfile)
  end</pre>

<pre><small><small>(defun test ()
  (setf *seq* (seq-create))
  (midinote *seq* 0.0 1.0 1 c4 100)
  (midinote *seq* 1.0 0.5 1 d4 100)
  (midinote *seq* 2.0 0.8 1 a4 100)
  (setf seqfile (open-binary "test.mid" :direction :output))
  (seq-write-smf *seq* seqfile)
  (close seqfile))
</small></small></pre>

<h2>A Larger Example</h2>

<p>This example illustrates the creation of random note onset times
using the negative exponential distribution. You can run the whole
example by loading the <code>example.sal</code> file included in the
midi extension: 

<pre>load "midi/example"</pre>

As seen here, we create a negative exponential distribution by creating uniformly
distributed random times, and then sort these. The function that creates times and then
quantizes them to 24ths of a beat is shown here. The <code>len</code> parameter is the
number of times, and the <code>average-ioi</code> parameter is the average
inter-onset-interval, the average time interval between two adjacent times:</p><pre>;; create list of random times and sort it
;; dur in ms.
function neg-exp-gen(len, average-ioi)
  begin
    with dur = len * average-ioi, times-list
    loop repeat len
      exec push(dur * random(10000) * 0.0001,
                times-list)
    end
    ;; to name the "less than" function, we cannot type
    ;; '&lt;' because that is not a symbol name in SAL. Therefore
    ;; we use the string "&lt;" and look up the symbol using
    ;; intern("&lt;").
    set times-list = sort(times-list, intern("&lt;"))
    display "initial list", times-list
    ;; map list to 24ths:
    return quantize-times-to-24ths(times-list)
  end</pre>

<pre><small><small>(defun neg-exp-gen (len average-ioi)
  (let ((dur (* len average-ioi)) times-list)
    (dotimes (i len)
	     (push (* dur (random 10000) 0.0001) 
                   times-list))
    (setf times-list (sort times-list #'&lt;))
    (display "initial list" times-list)
    ;; map list to 24ths:
    (quantize-times-to-24ths times-list) ))</small></small></pre>


<p>We add a few functions to help express time in terms of beats:

<pre>function set-tempo(tempo)
  begin
    set qtr = 60.0 / tempo
    set eighth = qtr * 0.5
    set half = qtr * 2
    set whole = qtr * 4
    set sixteenth = qtr * 0.25
  end
if ! boundp(quote(qtr)) then exec set-tempo(100)

function quantize-times-to-24ths(list)
  return mapcar(quote(quantize-time-to-24ths), list)

function quantize-time-to-24ths(time)
  return (qtr / 24.0) *
         round(24 * time / qtr)</pre>


<pre><small><small>(defun set-tempo (tempo)
  (setf qtr (/ 60.0 tempo))
  (setf eighth (* qtr 0.5))
  (setf half (* qtr 2))
  (setf whole (* qtr 4))
  (setf sixteenth (* qtr 0.25)))

(if (not (boundp 'qtr)) (set-tempo 100))

(defun quantize-times-to-24ths (list)
  (mapcar #'quantize-time-to-24ths list))

(defun quantize-time-to-24ths (time)
  (* (/ qtr 24.0)
     (round (* 24 (/ time qtr)))))</small></small></pre>


<p>Now, let's create Midi notes using negative exponential based onset
times: 
<pre>function melody(seq, onsets)
  loop for onset in onsets
    exec midinote(seq, onset, sixteenth, 1, 48 + random(24), 100)
  end

function neg-exp-melody()
  begin
    set *seq* = seq-create()
    ;; adds notes to *seq*
    exec melody(*seq*, neg-exp-gen(50, eighth))
    set seqfile = open-binary("negexp.mid", direction: :output)
    exec seq-write-smf(*seq*, seqfile)
  end

exec neg-exp-melody()</pre>


<pre><small><small>(defun melody (seq onsets)
  (dolist (onset onsets)
    (midinote seq onset 16th 1 (+ 48 (random 24)) 100)))

(defun neg-exp-melody ()
  (setf *seq* (seq-create))
  (melody *seq* (neg-exp-gen 50 eighth)) ;; adds notes to *seq*
  (setf seqfile (open-binary "negexp.mid" :direction :output))
  (seq-write-smf *seq* seqfile)

(neg-exp-melody)</small></small></pre>

<p>After evaluating <code>neg-exp-melody</code>, you can play the file
"negexp.mid" to hear the result. (Again, you can find the file's
location using <code>print setdir(".")</code> to get the current
directory.)  The times are quantized to 24th notes at a tempo
of 100, so you can even use a notation editor to display the result in common music
notation.

<h2>Synthesizing a Midi File</h2>

<p>To synthesize sound from a Midi file, use the <code>seq-midi</code> control construct.
This behavior reads the data in the <code>seq</code> object and for each note, creates an
instance of the behavior you provide. You will need an instrument, so let's define a
simple FM instrument to play the notes of the Midi data:</p>

<pre>function fm-note(chan, p, vel) ;; uses only p(itch) parameter
  return pwl(0.01, 1, .5, 1, 1) *
         fmosc(p, step-to-hz(p) * pwl(0.01, 6, 0.5, 4, 1) * osc(p))

<small><small>(defun fm-note (chan p vel) ;; uses only p(itch) parameter
  (mult (pwl 0.01 1 .5 1 1)
        (fmosc p
               (mult (step-to-hz p)
                     (pwl 0.01 6 0.5 4 1)
                     (osc p)))))
</small></small></pre><small><small>

</small></small><p>Now let's use <code>fm-note</code> to play the
previously defined <code>neg-exp-melody</code>,
which was saved in the variable <code>*seq*</code>. Here, SAL and Lisp will differ. We use <tt>seq-midi-sal</tt> to convert the sequence into a sound: </p><pre>play seq-midi-sal(*seq*, quote(fm-note))<br></pre><p>In Lisp, we use <tt>seq-midi</tt> to convert the sequence into a sound:<br></p>


<pre><small><small>(play (seq-midi *seq* (note (chan pitch vel) (fm-note chan pitch vel))))</small></small></pre><small><small>


</small></small>The <code>seq-midi</code> and <tt>seq-midi-sal</tt> construct automatically uses time transformations to place
notes at the proper time and to stretch them to the indicated duration. In addition, they pass the <code>chan</code>, <code>pitch</code>, and <code>vel</code> parameters based on the Midi data to your behavior. In this simple example, we ignored <code>chan</code>
and <code>vel</code>, but we used <code>pitch</code> to get the right pitch. You might
write a more complicated behavior that uses <code>chan</code> to select different
synthesis algorithms according to the Midi channel. 

<p>The syntax for these constructs are as follows: <code>seq-midi-sal</code> is a fairly straightforward function except that it takes functions as parameters. In SAL, the normal way to pass a function as a parameter is to pass the symbol than names the function. E.g. to pass the function <tt>fm-note</tt> as a parameter, we form the symbol that names the function using <tt>quote(fm-note)</tt>. There are function parameters for each type of Midi message. The second parameter is a function that is called for each Midi note. It should take 3 parameters: channel, pitch, and velocity. The remaining function parameters are keyword parameters that default to functions that do nothing. Include these parameters if you want to be called to process each Midi control (<tt>ctrl:</tt>), bend (<tt>bend:</tt>), aftertouch (<tt>touch:</tt>), or program change (<tt>prgm:</tt>) message. The <tt>ctrl:</tt> function must take three parameters: channel, control number, and control value. The <tt>bend:</tt>, <tt>touch:</tt>, and <tt>prgm:</tt> functions must take two parameters: channel and value.<br></p>

<pre>seq-midi-sal(my-seq, quote(note-fn),
             ctrl: quote(ctrl-fn),
             bend: quote(bend-fn),
             touch: quote(touch-fn),
             prgm: quote(prgm-fn))
</pre><p>You can also call <tt>seq-midi-sal</tt> from Lisp.<br></p><p>The <code>seq-midi</code> construct can only be called from Lisp and may be a little confusing. The
syntax is shown below. The symbol <code>note</code> appears to be a function call, but it is not. It is really there
to say that the following parameter list and behavior expression apply to Midi notes.
There can be other terms for other Midi messages. Thus, you can write in-line code to handle Midi messages. The <tt>filter-expr</tt> is optional. If present, it must evaluate to non-nil or the note is ignored. For example, the filter-expr <tt>(= chan 2)</tt> will select only notes on channel 2.<br></p><small><small><pre>(seq-midi my-seq
   (note (chan pitch velocity) filter-expr (my-note pitch velocity))
   (ctrl (chan control value) (...))
   (bend (chan value) (...))
   (touch (chan value) (...))
   (prgm (chan value) (setf (aref my-prgm chan) value))
</pre></small></small>

<h2>Examining <code>SEQ</code> Data</h2>

<p>In the lib folder of the standard Nyquist installation, there is a file called <code>midishow.lsp</code>.
If you load this, you can call some functions that help you examine <code>SEQ</code> data.
Try the following (after running <code>neg-exp-melody</code> above).</p>

<pre>load "midi/midishow"
exec midi-show(*seq*)
</pre><pre><small><small>(load "midi/midishow")
(midi-show *seq*)</small></small></pre><small><small>

</small></small><p>You will see a printout of the data inside the <code>SEQ</code> data object. Unlike
Midi, which stores note-on and note-off messages separately, the <code>SEQ</code>
structure saves notes as a single message that includes a duration. This is translated to
and from Midi format when you write and read Midi files.</p>

<p>You can also examine a Midi file by calling:</p>

<pre>exec midi-show-file("demo.mid")<br><br><small><small>(midi-show-file "demo.mid")
</small></small></pre><small><small>

</small></small><p>This function can take an optional second argument specifying an opened text file if
you want to write the data to a file rather than standard (console) output:</p><pre>exec midi-show-file("demo.mid", open("dump.txt", direction: :output))
exec gc()</pre>


<pre><small><small>(midi-show-file "demo.mid" (open "dump.txt" :direction :output))
(gc)</small></small></pre><small><small>


</small></small>What is going on here? I did not save the opened file, but rather passed it directly to
<code>midi-show-file</code>. Therefore, I did not have a value to pass to the <code>close</code>
function. However, I know that files are closed by the garbage collector when there are no
more references to them, so I simply called the garbage collector <code>gc</code> to insure that the file is closed.<br><br></body></html>